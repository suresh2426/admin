ADVANCED JAVA - PRACTICALS

PRACTICAL NO. 1


Objective: Program on JDBC using statements.
Program:

pom.xml:
<dependencies>
   <!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
   <dependency>
       <groupId>jakarta.servlet</groupId>
       <artifactId>jakarta.servlet-api</artifactId>
       <version>4.0.2</version>
       <scope>provided</scope>
   </dependency>


   <dependency>
       <groupId>com.mysql</groupId>
       <artifactId>mysql-connector-j</artifactId>
       <version>8.2.0</version>
   </dependency>
</dependencies>


index.html:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>Student CRUD</title>
</head>
<body>
   <h1>Student Management</h1>
   <form action="StudentServlet" method="post">
       <input type="hidden" name="action" value="add">
       <input type="hidden" name="studentId">


       <h2>Add New Student</h2>


       Roll Number: <input type="text" name="roll" required><br><br>
       Full Name: <input type="text" name="name" required><br><br>
       Email: <input type="email" name="email" required><br><br>
       Course:
       <select name="course" required>
           <option value="B.Tech">B.Tech</option>
           <option value="MCA">MCA</option>
           <option value="MBA">MBA</option>
       </select><br><br>
       Semester:
       <select name="semester" required>
           <option value="1">1</option>
           <option value="2">2</option>
           <option value="3">3</option>
           <option value="4">4</option>
       </select><br><br>


       <input type="submit" value="Submit">
   </form>


   <h2>Student Records</h2>
   <a href="StudentServlet?action=view">View All Students</a>
</body>
</html>

StudentServlet.java:
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;


@WebServlet("/StudentServlet")
public class StudentServlet extends HttpServlet {
   private Connection conn;


   @Override
   public void init() {
       try {
           Class.forName("com.mysql.cj.jdbc.Driver");
           conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/student_db", "root", "root");
       } catch (Exception e) {
           e.printStackTrace();
       }
   }


   @Override
   protected void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException {
       String action = req.getParameter("action");
       String roll = req.getParameter("roll");
       String name = req.getParameter("name");
       String email = req.getParameter("email");
       String course = req.getParameter("course");
       int semester = Integer.parseInt(req.getParameter("semester"));


       try {
           switch (action) {
               case "add":
                   addStudent(roll, name, email, course, semester);
                   break;
               case "update":
                   int id = Integer.parseInt(req.getParameter("studentId"));
                   updateStudent(id, roll, name, email, course, semester);
                   break;
           }
       } catch (SQLException e) {
           e.printStackTrace();
       }


       res.sendRedirect("StudentServlet?action=view");
   }


   @Override
   protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
       res.setContentType("text/html");
       PrintWriter out = res.getWriter();


       String action = req.getParameter("action");


       try {
           if("delete".equals(action)) {
               int id = Integer.parseInt(req.getParameter("id"));
               deleteStudent(id);
               res.sendRedirect("StudentServlet?action=view");
           } else if ("edit".equals(action)) {
               int id = Integer.parseInt(req.getParameter("id"));
               displayEditForm(out, id);
           } else {
               displayStudents(out);
           }
       } catch (SQLException | NumberFormatException e) {
           e.printStackTrace();
       }
   }


   private void addStudent(String roll, String name, String email,
                           String course, int semester) throws SQLException {
       String sql = "INSERT INTO students (roll_number, full_name, email, course, semester) " +
               "VALUES (?, ?, ?, ?, ?)";
       try(PreparedStatement stmt = conn.prepareStatement(sql)) {
           stmt.setString(1, roll);
           stmt.setString(2, name);
           stmt.setString(3, email);
           stmt.setString(4, course);
           stmt.setInt(5, semester);
           stmt.executeUpdate();
       }
   }


   private void updateStudent(int id, String roll, String name, String email,
                              String course, int semester) throws SQLException {
       String sql = "UPDATE students SET roll_number=?, full_name=?, email=?, " +
               "course=?, semester=? WHERE id=?";
       try(PreparedStatement stmt = conn.prepareStatement(sql)) {
           stmt.setString(1, roll);
           stmt.setString(2, name);
           stmt.setString(3, email);
           stmt.setString(4, course);
           stmt.setInt(5, semester);
           stmt.setInt(6, id);
           stmt.executeUpdate();
       }
   }


   private void deleteStudent(int id) throws SQLException {
       String sql = "DELETE FROM students WHERE id=?";
       try(PreparedStatement stmt = conn.prepareStatement(sql)) {
           stmt.setInt(1, id);
           stmt.executeUpdate();
       }
   }


   private void displayStudents(PrintWriter out) throws SQLException {
       out.println("<html><body>");
       out.println("<h2>Student Records</h2>");
       out.println("<table border='1'>");
       out.println("<tr><th>ID</th><th>Roll No</th><th>Name</th><th>Email</th><th>Course</th><th>Semester</th><th>Actions</th></tr>");


       try(Statement stmt = conn.createStatement();
           ResultSet rs = stmt.executeQuery("SELECT * FROM students")) {


           while(rs.next()) {
               out.println("<tr>");
               out.println("<td>" + rs.getInt("id") + "</td>");
               out.println("<td>" + rs.getString("roll_number") + "</td>");
               out.println("<td>" + rs.getString("full_name") + "</td>");
               out.println("<td>" + rs.getString("email") + "</td>");
               out.println("<td>" + rs.getString("course") + "</td>");
               out.println("<td>" + rs.getInt("semester") + "</td>");
               out.println("<td>");
               out.println("<a href='StudentServlet?action=edit&id=" + rs.getInt("id") + "'>Edit</a> | ");
               out.println("<a href='StudentServlet?action=delete&id=" + rs.getInt("id") + "'>Delete</a>");
               out.println("</td>");
               out.println("</tr>");
           }
       }


       out.println("</table>");
       out.println("<br><a href='index.html'>Back</a>");
       out.println("</body></html>");
   }


   private void displayEditForm(PrintWriter out, int id) throws SQLException {
       String sql = "SELECT * FROM students WHERE id=?";
       try(PreparedStatement stmt = conn.prepareStatement(sql)) {
           stmt.setInt(1, id);
           ResultSet rs = stmt.executeQuery();
           if(rs.next()) {
               out.println("<html><body>");
               out.println("<h2>Edit Student</h2>");
               out.println("<form action='StudentServlet' method='post'>");
               out.println("<input type='hidden' name='action' value='update'>");
               out.println("<input type='hidden' name='studentId' value='" + id + "'>");
               out.println("Roll Number: <input type='text' name='roll' value='" + rs.getString("roll_number") + "' required><br><br>");
               out.println("Full Name: <input type='text' name='name' value='" + rs.getString("full_name") + "' required><br><br>");
               out.println("Email: <input type='email' name='email' value='" + rs.getString("email") + "' required><br><br>");
               out.println("Course: <select name='course' required>");
               out.println("<option value='B.Tech'" + ("B.Tech".equals(rs.getString("course")) ? " selected" : "") + ">B.Tech</option>");
               out.println("<option value='MCA'" + ("MCA".equals(rs.getString("course")) ? " selected" : "") + ">MCA</option>");
               out.println("<option value='MBA'" + ("MBA".equals(rs.getString("course")) ? " selected" : "") + ">MBA</option>");
               out.println("</select><br><br>");
               out.println("Semester: <select name='semester' required>");
               out.println("<option value='1'" + (rs.getInt("semester") == 1 ? " selected" : "") + ">1</option>");
               out.println("<option value='2'" + (rs.getInt("semester") == 2 ? " selected" : "") + ">2</option>");
               out.println("<option value='3'" + (rs.getInt("semester") == 3 ? " selected" : "") + ">3</option>");
               out.println("<option value='4'" + (rs.getInt("semester") == 4 ? " selected" : "") + ">4</option>");
               out.println("</select><br><br>");
               out.println("<input type='submit' value='Update'>");
               out.println("</form>");
               out.println("<br><a href='StudentServlet?action=view'>Cancel</a>");
               out.println("</body></html>");
           }
       }
   }


   @Override
   public void destroy() {
       try {
           conn.close();
       } catch(SQLException e) {
           e.printStackTrace();
       }
   }
}


Output:





PRACTICAL NO. 2


Objective: Program to demonstrate Generic and HTTP Servlet response and request objects.
Program:

pom.xml:
<dependency>
   <groupId>jakarta.servlet</groupId>
   <artifactId>jakarta.servlet-api</artifactId>
   <version>4.0.2</version>
   <scope>provided</scope>
</dependency>

index.html:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>Student Form</title>
</head>
<body>
   <h2>Student Details Form</h2>
   <form action="student" method="post">
       Roll Number: <input type="text" name="roll"><br><br>
       Name: <input type="text" name="name"><br><br>
       <input type="submit" value="submit">
   </form>
</body>
</html>

MyGenericServlet.java:
import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebServlet;
import java.io.IOException;
import java.io.PrintWriter;


@WebServlet("/student")
public class MyGenericServlet extends GenericServlet {


   @Override
   public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
       res.setContentType("text/html");
       PrintWriter out = res.getWriter();


       String roll = req.getParameter("roll");
       String name = req.getParameter("name");
       out.println("<html><body>");
       out.println("<h3>Student Details Submitted:</h3>");
       out.println("<p>Roll Number: " + roll + "<br>");
       out.println("Name: " + name + "</p><br>");
       out.println("<p>Protocol: " + req.getProtocol() + "<br>");
       out.println("Scheme: " + req.getScheme() + "<br>");
       out.println("Encoding: " + req.getCharacterEncoding() + "<br>");
       out.println("Content Type: " + req.getContentType() + "<br>");
       out.println("Server Name: " + req.getServerName() + "<br>");
       out.println("Servlet Context: " + req.getServletContext() + "<br>");
       out.println("Port: " + req.getLocalPort() + "</p><br>");
       out.println("<a href='headers'>Go to HTTP Servlet (View Headers)</a>");
       out.println("</body></html>");
   }
}

MyHttpServlet.java:
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;


@WebServlet("/headers")
public class MyHttpServlet extends HttpServlet {


   @Override
   protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
       res.setContentType("text/html");
       PrintWriter out = res.getWriter();


       out.println("<html><body>");
       out.println("<h3>HTTP Request Headers:</h3>");


       out.println("<p>User-Agent: " + req.getHeader("User-Agent") + "<br>");
       out.println("Host:" + req.getHeader("Host") + "<br>");
       out.println("Accept-Language: " + req.getHeader("Accept-Language") + "</p>");


       out.println("<h4>All Headers:</h4>");
       out.println("<p>");
       Enumeration<String> headerNames = req.getHeaderNames();
       while (headerNames.hasMoreElements()) {
           String headerName = headerNames.nextElement();
           out.println(headerName + ": " + req.getHeader(headerName) + "<br>");
       }
       out.println("</p>");


       out.println("<br><a href='index.html'>Back to Form</a>");
       out.println("</body></html>");
   }
}


Output:



PRACTICAL NO. 3


Objective: Program to demonstrate Http session using cookies, URL rewritten, Hidden Fields.
Program:

pom.xml:
<dependency>
   <groupId>jakarta.servlet</groupId>
   <artifactId>jakarta.servlet-api</artifactId>
   <version>4.0.2</version>
   <scope>provided</scope>
</dependency>

index.html:
<!DOCTYPE html>
<html>
<head>
   <title>Session Tracking Demo</title>
</head>
<body>
<h2>User Registration</h2>
<form action="SessionServlet" method="post">
   Name: <input type="text" name="name" required><br><br>
   Email: <input type="email" name="email" required><br><br>
   <input type="submit" value="Submit">
</form>
</body>
</html>



SessionServlet.java:
package org.kjsim;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URLEncoder;


@WebServlet
public class SessionServlet extends HttpServlet {
   @Override
   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String name = request.getParameter("name");
       String email = request.getParameter("email");


       // store in cookie
       Cookie nameCookie = new Cookie("username", name);
       response.addCookie(nameCookie);


       // URL Rewriting: Append email as a parameter
       String encodedEmail = URLEncoder.encode(email, "UTF-8");
       String redirectURL = "ConfirmServlet?email=" + encodedEmail;


       // Hidden Field: Generate a session ID (for demonstration)
       String sessionId = "SESS_" + System.currentTimeMillis();


       response.sendRedirect(redirectURL + "&sessionId=" + sessionId);
   }
}

ConfirmServlet.java:
package org.kjsim;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;


@WebServlet("/ConfirmServlet")
public class ConfirmServlet extends HttpServlet {
   @Override
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       String email = request.getParameter("email");
       String sessionId = request.getParameter("sessionId");


       response.setContentType("text/html");
       PrintWriter out = response.getWriter();
       out.println("<html><body>");
       out.println("<h2>Confirm Details</h2>");
       out.println("<form action='DisplayServlet' method='post'>");
       out.println("<input type='hidden' name='email' value='" + email + "'>");
       out.println("<input type='hidden' name='sessionId' value='" + sessionId + "'>");
       out.println("<input type='submit' value='Confirm'>");
       out.println("</form>");
       out.println("</body></html>");
   }
}

DisplayServlet.java
package org.kjsim;


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;


@WebServlet("/DisplayServlet")
public class DisplayServlet extends HttpServlet {
   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
       //Retrieve from cookie
       String name = null;
       Cookie[] cookies =  request.getCookies();
       if(cookies!=null){
           for(Cookie cookie : cookies){
               if("username".equals(cookie.getName())){
                   name = cookie.getValue();
                   break;
               }
           }
       }


       // Retrieve from URL (Via hidden field)
       String sessionId = request.getParameter("sessionId");


       // Retrieve from hidden field
       String email = request.getParameter("email");


       response.setContentType("text/html");
       PrintWriter out = response.getWriter();
       out.println("<html><body>");
       out.println("<h2>Session Tracking Methods:</h2>");
       out.println("<ul>");
       out.println("<li>Cookie (Name): " + name + "</li>");
       out.println("<li>URL Rewriting (Session ID): " + sessionId + "</li>");
       out.println("<li>Hidden Field (Email): " + email + "</li>");
       out.println("</ul>");
       out.println("</body></html>");
   }
}

Output:



PRACTICAL NO. 4


Objective: Program to demonstrate online web applications (Online Quiz) 
Program:

pom.xml:
<dependencies>
   <!-- Servlet API -->
   <dependency>
       <groupId>jakarta.servlet</groupId>
       <artifactId>jakarta.servlet-api</artifactId>
       <version>4.0.2</version>
       <scope>provided</scope>
   </dependency>


   <!-- MySQL Connector -->
   <dependency>
       <groupId>com.mysql</groupId>
       <artifactId>mysql-connector-j</artifactId>
       <version>8.2.0</version>
   </dependency>
</dependencies>

Database setup:
CREATE DATABASE quiz_db;
USE quiz_db;

CREATE TABLE questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question_text VARCHAR(255),
    option1 VARCHAR(100),
    option2 VARCHAR(100),
    option3 VARCHAR(100),
    option4 VARCHAR(100),
    correct_option INT
);

INSERT INTO questions (question_text, option1, option2, option3, option4, correct_option) VALUES
('What is Java?', 'Programming Language', 'Coffee', 'Island', 'Car', 1),
('What is JDBC?', 'Java Database Connectivity', 'JSON Database Call', 'Java Data', 'None', 1);

QuizServlet.java
package org.kjsim;


import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;
import java.util.*;




@WebServlet("/QuizServlet")
public class QuizServlet extends HttpServlet {
   private Connection conn;


   @Override
   public void init() {
       try {
           Class.forName("com.mysql.cj.jdbc.Driver");
           conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/quiz_db", "root", "root");
       } catch(Exception e) {
           e.printStackTrace();
       }
   }


   @Override
   protected void doGet(HttpServletRequest request, HttpServletResponse response)
           throws IOException {
       HttpSession session = request.getSession(true);
       response.setContentType("text/html");
       PrintWriter out = response.getWriter();


       // Fetch questions if not in session
       List<Map<String, Object>> questions = (List<Map<String, Object>>) session.getAttribute("questions");
       if (questions == null) {
           questions = fetchQuestions();
           session.setAttribute("questions", questions);
           session.setAttribute("currentIndex", 0);
           session.setAttribute("userAnswers", new HashMap<Integer, Integer>());
       }


       int currentIndex = (Integer) session.getAttribute("currentIndex");
       if (currentIndex >= questions.size()) {
           displayResults(out, questions, session);
       } else {
           // Fix: Remove extra parenthesis after questions.get(currentIndex)
           displayQuestion(out, questions.get(currentIndex), currentIndex);
       }
   }


   @Override
   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
       HttpSession session = request.getSession();
       int currentIndex = (Integer) session.getAttribute("currentIndex");
       Map<Integer, Integer> userAnswers = (HashMap<Integer, Integer>) session.getAttribute("userAnswers");
       int answer = Integer.parseInt(request.getParameter("answer"));


       userAnswers.put(currentIndex, answer);
       session.setAttribute("currentIndex", currentIndex + 1);
       response.sendRedirect("QuizServlet");
   }


   private List<Map<String, Object>> fetchQuestions() {
       List<Map<String, Object>> questions = new ArrayList<>();
       String sql = "SELECT * FROM questions";
       try (Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)) {
           while (rs.next()) {
               Map<String, Object> q = new HashMap<>();
               q.put("id", rs.getInt("id"));
               q.put("text", rs.getString("question_text"));
               q.put("options", new String[]{
                       rs.getString("option1"),
                       rs.getString("option2"),
                       rs.getString("option3"),
                       rs.getString("option4")
               });
               q.put("correct", rs.getInt("correct_option"));
               questions.add(q);
           }
       } catch (SQLException e) {
           e.printStackTrace();
       }
       return questions;
   }


   private void displayQuestion(PrintWriter out, Map<String, Object> question, int index) {
       out.println("<html><body>");
       out.println("<h2>Question " + (index + 1) + "</h2>");
       out.println("<form method='post'>");
       out.println("<p>" + question.get("text") + "</p>");
       String[] options = (String[]) question.get("options");
       for (int i = 0; i < options.length; i++) {
           out.println("<input type='radio' name='answer' value='" + (i+1) + "'> " + options[i] + "<br>");
       }
       out.println("<input type='submit' value='Next'>");
       out.println("</form></body></html>");
   }


   private void displayResults(PrintWriter out, List<Map<String, Object>> questions, HttpSession session) {
       Map<Integer, Integer> userAnswers = (HashMap<Integer, Integer>) session.getAttribute("userAnswers");
       int score = 0;


       out.println("<html><body>");
       out.println("<h2>Quiz Results</h2>");
       for (int i = 0; i < questions.size(); i++) {
           int correct = (Integer) questions.get(i).get("correct");
           int userAnswer = userAnswers.get(i);
           if (userAnswer == correct) score++;
           out.println("<p>Question " + (i+1) + ": " + questions.get(i).get("text") + "</p>");
           out.println("<p>Your Answer: " + ((String[]) questions.get(i).get("options"))[userAnswer-1] +
                   (userAnswer == correct ? " (Correct)" : " (Incorrect)") + "</p><hr>");
       }
       out.println("<h3>Total Score: " + score + "/" + questions.size() + "</h3>");
       out.println("</body></html>");
       session.invalidate(); // Clear session after quiz
   }


   @Override
   public void destroy() {
       try {
           conn.close();
       } catch (SQLException e) {
           e.printStackTrace();
       }
   }
}

Output:




PRACTICAL NO. 5


Objective: Program to demonstrate Page directives with JSP.
Program:

index.jsp:
<%@ page import="java.util.Date" %>
<%@ page contentType="text/html;charset=UTF-8" %>
<%@ page errorPage="error.jsp" %>


<html>
<head>
   <title>JSP Directives Demo</title>
</head>
<body>
<h2>Page Directives Example</h2>


<!-- Use imported Date class -->
<p>Current Time: <%= new Date() %></p>


<!-- Force an error (division by zero) -->
<%
   int x = 10 / 0; // This will throw ArithmeticException
%>
</body>
</html>

error.jsp:
<%@ page isErrorPage="true" %>
<%@ page contentType="text/html;charset=UTF-8" %>


<html>
<head>
 <title>Error Page</title>
</head>
<body>
<h2>Error Occurred!</h2>
<p>Exception: <%= exception.getClass().getName() %></p>
<p>Message: <%= exception.getMessage() %></p>
</body>
</html>

Output:


PRACTICAL NO. 6


Objective: Program to demonstrate Http session using cookies.
Program:

pom.xml:
<packaging>war</packaging>


<dependencies>
   <!-- https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api -->
   <dependency>
       <groupId>jakarta.servlet</groupId>
       <artifactId>jakarta.servlet-api</artifactId>
       <version>4.0.2</version>
       <scope>provided</scope>
   </dependency>
</dependencies>


<build>
   <plugins>
       <plugin>
           <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin -->
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-war-plugin</artifactId>
           <version>3.3.1</version>
       </plugin>
   </plugins>
</build>

index.html:
<!DOCTYPE html>
<html>
<head>
 <title>Login Demo</title>
</head>
<body>
<h2>Login Form</h2>
 <form action="LoginServlet" method="post">
   Username: <input type="text" name="username" required><br><br>
   Password: <input type="password" name="password" required><br><br>
   <input type="submit" value="Login">
 </form>
 <% if(request.getParameter("error") != null) { %>
   <p style="color: red">Invalid credentials!</p>
 <% } %>
</body>
</html>



LoginServlet.java:
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;


@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
   protected void doPost(HttpServletRequest request, HttpServletResponse response)
           throws ServletException, IOException {


       String username = request.getParameter("username");
       String password = request.getParameter("password");


       if ("admin".equals(username) && "admin".equals(password)) {
           // 1. HttpSession (Server-side storage)
           HttpSession session = request.getSession();
           session.setAttribute("username", username);
           session.setAttribute("loginTime", System.currentTimeMillis());


           // 2. Cookies (Client-side storage)
           Cookie userCookie = new Cookie("userCookie", username);
           userCookie.setMaxAge(30*60); // 30 minutes
           response.addCookie(userCookie);


           // 3. URL Rewriting (Append parameters)
           String encodedURL = response.encodeURL("WelcomeServlet?userParam=" + username);
           response.sendRedirect(encodedURL);
       } else {
           response.sendRedirect("index.html?error=1");
       }
   }
}



WelcomeServlet.java:
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.*;
import java.util.Date;


@WebServlet("/WelcomeServlet")
public class WelcomeServlet extends HttpServlet {
   protected void doGet(HttpServletRequest request, HttpServletResponse response)
           throws ServletException, IOException {


       response.setContentType("text/html");
       PrintWriter out = response.getWriter();


       // Get data from all three sources
       String sessionUser = (String) request.getSession().getAttribute("username");
       String cookieUser = getCookieValue(request, "userCookie");
       String paramUser = request.getParameter("userParam");


       out.println("<html><head><title>Welcome</title></head><body>");
       out.println("<h2>Session Tracking Demo</h2>");


       // Display all values
       out.println("<h3>User Information:</h3>");
       out.println("<ul>");
       out.println("<li>From Session: " + sessionUser + "</li>");
       out.println("<li>From Cookie: " + cookieUser + "</li>");
       out.println("<li>From URL Parameter: " + paramUser + "</li>");
       out.println("</ul>");


       // Additional session info
       HttpSession session = request.getSession();
       out.println("<h3>Session Details:</h3>");
       out.println("<ul>");
       out.println("<li>Session ID: " + session.getId() + "</li>");
       out.println("<li>Created: " + new Date(session.getCreationTime()) + "</li>");
       out.println("<li>Last Accessed: " + new Date(session.getLastAccessedTime()) + "</li>");
       out.println("<li>Timeout: " + session.getMaxInactiveInterval() + " seconds</li>");
       out.println("</ul>");


       // Logout link with URL rewriting
       String logoutURL = response.encodeURL("LogoutServlet");
       out.println("<a href='" + logoutURL + "'>Logout</a>");
       out.println("</body></html>");
   }


   private String getCookieValue(HttpServletRequest request, String name) {
       Cookie[] cookies = request.getCookies();
       if (cookies != null) {
           for (Cookie cookie : cookies) {
               if (cookie.getName().equals(name)) {
                   return cookie.getValue();
               }
           }
       }
       return "Not found";
   }
}



LogoutServlet.java:
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.IOException;


@WebServlet("/LogoutServlet")
public class LogoutServlet extends HttpServlet {
   protected void doGet(HttpServletRequest request, HttpServletResponse response)
           throws ServletException, IOException {


       // 1. Invalidate session
       HttpSession session = request.getSession(false);
       if (session != null) {
           session.invalidate();
       }


       // 2. Expire cookie
       Cookie cookie = new Cookie("userCookie", "");
       cookie.setMaxAge(0);
       response.addCookie(cookie);


       // 3. Redirect to login
       response.sendRedirect("index.html");
   }
}

Output:




PRACTICAL NO. 7


Objective: Program to demonstrate Error Page in JSP.
Program:

index.jsp:
<%@ page import="java.util.Date" %>
<%@ page contentType="text/html;charset=UTF-8" %>
<%@ page errorPage="error.jsp" %>


<html>
<head>
   <title>JSP Directives Demo</title>
</head>
<body>
<h2>Page Directives Example</h2>


<!-- Use imported Date class -->
<p>Current Time: <%= new Date() %></p>


<!-- Force an error (division by zero) -->
<%
   int x = 10 / 0; // This will throw ArithmeticException
%>
</body>
</html>

error.jsp:
<%@ page isErrorPage="true" %>
<%@ page contentType="text/html;charset=UTF-8" %>


<html>
<head>
 <title>Error Page</title>
</head>
<body>
<h2>Error Occurred!</h2>
<p>Exception: <%= exception.getClass().getName() %></p>
<p>Message: <%= exception.getMessage() %></p>
</body>
</html>

Output:



PRACTICAL NO. 8


Objective: Program to demonstrate JSP Actions, JSP with beans
Program:

pom.xml:
<dependency>
   <groupId>jakarta.servlet</groupId>
   <artifactId>jakarta.servlet-api</artifactId>
   <version>4.0.2</version>
   <scope>provided</scope>
</dependency>

UserBean.java:
package org.kjsim.bean;


public class UserBean {
   private String name;


   public String getName() {
       return name;
   }


   public void setName(String name) {
       this.name = name;
   }
}

input.jsp:
<!DOCTYPE html>
<html>
<head>
   <title>Bean Input</title>
</head>
<body>
<h2>Enter Your Name</h2>
<form action="result.jsp" method="post">
   Name: <input type="text" name="username" required><br><br>
   <input type="submit" value="Submit">
</form>
</body>
</html>

result.jsp
<%@ page language="java" import="org.kjsim.bean.UserBean" %>
<jsp:useBean id="user" class="org.kjsim.bean.UserBean" scope="request" />
<jsp:setProperty name="user" property="name" param="username" />


<!DOCTYPE html>
<html>
<head>
   <title>Result</title>
</head>
<body>
<h2>Welcome, <jsp:getProperty name="user" property="name" />!</h2>
</body>
</html>

Output:




PRACTICAL NO. 9


Objective: Program to demonstrate to custom tags, JSTL tags.
Program:

pom.xml:
<!-- JSTL API -->
<dependency>
   <groupId>jakarta.servlet.jsp.jstl</groupId>
   <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
   <version>3.0.0</version>
   <scope>provided</scope>
</dependency>


<!-- JSTL Implementation -->
<dependency>
   <groupId>org.glassfish.web</groupId>
   <artifactId>jakarta.servlet.jsp.jstl</artifactId>
   <version>3.0.1</version>
</dependency>


<dependency>
   <groupId>jakarta.servlet</groupId>
   <artifactId>jakarta.servlet-api</artifactId>
   <version>4.0.2</version>
   <scope>provided</scope>
</dependency>

1. Custom Tags

a. Create a Custom Tag Handler Class

HelloTag.java:
package org.kjsim.tags;


import javax.servlet.jsp.tagext.*;
import javax.servlet.jsp.*;
import java.io.*;


public class HelloTag extends SimpleTagSupport {
   private String name;


   public void setName(String name) {
       this.name = name;
   }


   @Override
   public void doTag() throws JspException, IOException {
       JspWriter out = getJspContext().getOut();
       out.print("Hello, " + name + "! 👋");
   }
}

b. Define the Tag Library Descriptor (TLD)

mytags.tld (Place in WEB-INF/):
<?xml version="1.0" encoding="UTF-8"?>
<taglib version="2.1" xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd">
   <tlib-version>1.0</tlib-version>
   <short-name>mytags</short-name>
   <uri>/mytags</uri>


   <tag>
       <name>hello</name>
       <tag-class>org.kjsim.tags.HelloTag</tag-class>
       <body-content>empty</body-content>
       <attribute>
           <name>name</name>
           <required>true</required>
           <rtexprvalue>true</rtexprvalue>
       </attribute>
   </tag>
</taglib>

c. Use the Custom Tag in JSP

customTagDemo.jsp:
<%@ page contentType="text/html;charset=UTF-8" %>
<%@ taglib prefix="mytags" uri="/mytags" %>


<html>
<head>
 <title>Custom Tag Demo</title>
</head>
<body>
<h2>Custom Tag Example</h2>
<mytags:hello name="Alice"/>
</body>
</html>

Output:



2. JSTL Tags

pom.xml:
<dependency>
   <groupId>javax.servlet</groupId>
   <artifactId>jstl</artifactId>
   <version>1.2</version>
</dependency>

jstlDemo.jsp
<%@ page contentType="text/html;charset=UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>


<html>
<head>
 <title>JSTL Demo</title>
</head>
<body>
<h2>JSTL Core Tags Example</h2>


<c:set var="items" value="Apple,Banana,Cherry" scope="page" />


<c:set var="itemsArray" value="${fn:split(items, ',')}" />


<h3>Loop with &lt;c:forEach&gt;:</h3>
<ul>
 <c:forEach items="${itemsArray}" var="item">
   <li><c:out value="${item}"/></li>
 </c:forEach>
</ul>


<h3>Condition with &lt;c:if&gt;:</h3>
<c:if test="${not empty itemsArray}">
 <p>Total items: ${fn:length(itemsArray)}</p>
</c:if>
</body>
</html>


Output:


PRACTICAL NO. 10


Objective: Program to demonstrate simple XML tags
Program:

students.xml:
<?xml version="1.0" encoding="UTF-8"?>
<students>
   <student>
       <roll>101</roll>
       <name>Amit</name>
       <course>BCA</course>
   </student>
   <student>
       <roll>102</roll>
       <name>Reena</name>
       <course>MCA</course>
   </student>
</students>

XMLReader.java
package org.kjsim;


import javax.xml.parsers.*;
import org.w3c.dom.*;
import java.io.*;


public class XMLReader {
   public static void main(String[] args) throws Exception {
       File file = new File("src/main/java/org/kjsim/students.xml");
       DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
       DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();


       Document doc = dBuilder.parse(file);
       doc.getDocumentElement().normalize();


       NodeList list = doc.getElementsByTagName("student");


       for (int i = 0; i < list.getLength(); i++) {
           Node node = list.item(i);
           Element element = (Element) node;


           System.out.println("Roll: " + element.getElementsByTagName("roll").item(0).getTextContent());
           System.out.println("Name: " + element.getElementsByTagName("name").item(0).getTextContent());
           System.out.println("Course: " + element.getElementsByTagName("course").item(0).getTextContent());
           System.out.println();
       }
   }
}

Output:

PRACTICAL NO. 11


Objective: Program to demonstrate DTD, XML Parser, Validator..
Program:

catalog.dtd:
<!ELEMENT students (student+)>
       <!ELEMENT student (roll, name, course)>
       <!ELEMENT roll (#PCDATA)>
       <!ELEMENT name (#PCDATA)>
       <!ELEMENT course (#PCDATA)>

students.dtd:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE students SYSTEM "students.dtd">
<students>
   <student>
       <roll>101</roll>
       <name>Amit</name>
       <course>BCA</course>
   </student>
   <student>
       <roll>102</roll>
       <name>Reena</name>
       <course>MCA</course>
   </student>
</students>

XMLValidator.java
package org.kjsim;


import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;


import java.io.File;


public class XMLValidator {
   public static void main(String[] args) {
       try {
           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
           factory.setValidating(true);
           factory.setNamespaceAware(false);


           DocumentBuilder builder = factory.newDocumentBuilder();


           builder.setErrorHandler(new DefaultHandler() {
               @Override
               public void error(SAXParseException e) throws SAXException {
                   throw e;
               }


               @Override
               public void fatalError(SAXParseException e) throws SAXException {
                   throw e;
               }


               @Override
               public void warning(SAXParseException e) throws SAXException {
                   System.out.println("Warning: " + e.getMessage());
               }
           });


           Document doc = builder.parse(new File("src/main/resources/students.xml"));
           System.out.println("XML is valid and parsed successfully.");


       } catch (Exception e) {
           System.out.println("Validation Error: " + e.getMessage());
       }
   }
}

Output:

PRACTICAL NO. 12


Objective: Program to Write a Hibernate Application, Configuring Hibernate for our application.
Program:

pom.xml:
<dependency>
   <groupId>org.hibernate.orm</groupId>
   <artifactId>hibernate-core</artifactId>
   <version>6.2.7.Final</version>
</dependency>
<dependency>
   <groupId>com.mysql</groupId>
   <artifactId>mysql-connector-j</artifactId>
   <version>8.2.0</version>
</dependency>
<dependency>
   <groupId>jakarta.persistence</groupId>
   <artifactId>jakarta.persistence-api</artifactId>
   <version>3.1.0</version>
</dependency>



Student.java:
package org.kjsim;


import jakarta.persistence.*;


@Entity
@Table(name = "students")
public class Student {


   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private int id;


   @Column(name = "name")
   private String name;


   @Column(name = "course")
   private String course;


   // Getters & Setters
   public int getId() { return id; }
   public void setId(int id) { this.id = id; }


   public String getName() { return name; }
   public void setName(String name) { this.name = name; }


   public String getCourse() { return course; }
   public void setCourse(String course) { this.course = course; }
}

hibernate.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
   <session-factory>
       <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
       <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/testdb</property>
       <property name="hibernate.connection.username">root</property>
       <property name="hibernate.connection.password">root</property>


       <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
       <property name="hibernate.hbm2ddl.auto">update</property>
       <property name="hibernate.show_sql">true</property>


       <mapping class="org.kjsim.Student"/>
   </session-factory>
</hibernate-configuration>


App.java:
package org.kjsim;


import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


public class App {
   public static void main(String[] args) {
       Configuration cfg = new Configuration().configure();
       SessionFactory factory = cfg.buildSessionFactory();


       Session session = factory.openSession();
       session.beginTransaction();


       Student student = new Student();
       student.setName("Amit");
       student.setCourse("MCA");


       session.persist(student);
       session.getTransaction().commit();


       System.out.println("Student saved successfully.");


       session.close();
       factory.close();
   }
}

Output:


PRACTICAL NO. 13


Objective: Program to fetch data from the database using Hibernate and Annotations.
Program:

pom.xml:
<dependency>
   <groupId>org.hibernate.orm</groupId>
   <artifactId>hibernate-core</artifactId>
   <version>6.2.7.Final</version>
</dependency>
<dependency>
   <groupId>com.mysql</groupId>
   <artifactId>mysql-connector-j</artifactId>
   <version>8.2.0</version>
</dependency>
<dependency>
   <groupId>jakarta.persistence</groupId>
   <artifactId>jakarta.persistence-api</artifactId>
   <version>3.1.0</version>
</dependency>

Student.java:
package org.kjsim;


import jakarta.persistence.*;


@Entity
@Table(name = "students")
public class Student {


   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private int id;


   private String name;
   private String course;


   // Getters & Setters
   public int getId() { return id; }
   public void setId(int id) { this.id = id; }


   public String getName() { return name; }
   public void setName(String name) { this.name = name; }


   public String getCourse() { return course; }
   public void setCourse(String course) { this.course = course; }
}

hibernate.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">


<hibernate-configuration>
   <session-factory>
       <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
       <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/testdb</property>
       <property name="hibernate.connection.username">root</property>
       <property name="hibernate.connection.password">root</property>
       <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
       <property name="hibernate.show_sql">true</property>
       <property name="hibernate.hbm2ddl.auto">update</property>
       <mapping class="org.kjsim.Student"/>
   </session-factory>
</hibernate-configuration>

FetchApp.java:
package org.kjsim;


import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


import java.util.List;


public class FetchApp {
   public static void main(String[] args) {
       Configuration cfg = new Configuration().configure();
       SessionFactory factory = cfg.buildSessionFactory();


       Session session = factory.openSession();


       List<Student> list = session.createQuery("FROM Student", Student.class).list();


       for (Student s : list) {
           System.out.println("ID: " + s.getId());
           System.out.println("Name: " + s.getName());
           System.out.println("Course: " + s.getCourse());
           System.out.println("-----");
       }


       session.close();
       factory.close();
   }
}

Output:

PRACTICAL NO. 14


Objective: Building first Spring Application.
Program:

pom.xml:
<dependency>
   <groupId>org.springframework</groupId>
   <artifactId>spring-context</artifactId>
   <version>5.3.32</version>
</dependency>

HelloService.java:
package org.kjsim;


public class HelloService {
   private String message;


   public void setMessage(String message) {
       this.message = message;
   }


   public void sayHello() {
       System.out.println("Spring says: " + message);
   }
}

applicationContext.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">


   <bean id="helloService" class="org.kjsim.HelloService">
       <property name="message" value="Welcome to Spring Framework!" />
   </bean>
</beans>

MainApp.java:
package org.kjsim;


import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class MainApp {
   public static void main(String[] args) {
       ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");


       HelloService service = (HelloService) context.getBean("helloService");
       service.sayHello();
   }
}

Output:

PRACTICAL NO. 15


Objective: Simple web application using Spring
Program:

pom.xml:
<!-- Spring MVC -->
<dependency>
   <groupId>org.springframework</groupId>
   <artifactId>spring-webmvc</artifactId>
   <version>5.3.32</version>
</dependency>


<!-- Servlet API -->
<dependency>
   <groupId>jakarta.servlet</groupId>
   <artifactId>jakarta.servlet-api</artifactId>
   <version>4.0.2</version>
   <scope>provided</scope>
</dependency>


<!-- JSP -->
<dependency>
   <groupId>jakarta.servlet.jsp.jstl</groupId>
   <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
   <version>3.0.0</version>
</dependency>
<dependency>
   <groupId>org.glassfish.web</groupId>
   <artifactId>jakarta.servlet.jsp.jstl</artifactId>
   <version>3.0.1</version>
</dependency>

web.xml:
<web-app xmlns="http://jakarta.ee/xml/ns/jakartaee"
        version="4.0">


   <servlet>
       <servlet-name>spring</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       <init-param>
           <param-name>contextConfigLocation</param-name>
           <param-value>/WEB-INF/spring-config.xml</param-value>
       </init-param>
       <load-on-startup>1</load-on-startup>
   </servlet>


   <servlet-mapping>
       <servlet-name>spring</servlet-name>
       <url-pattern>/</url-pattern>
   </servlet-mapping>


   <welcome-file-list>
       <welcome-file>index.jsp</welcome-file>
   </welcome-file-list>


</web-app>

spring-config.xml:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mvc="http://www.springframework.org/schema/mvc"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">


   <context:component-scan base-package="org.kjsim"/>
   <mvc:annotation-driven />


   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix" value="/WEB-INF/views/" />
       <property name="suffix" value=".jsp" />
   </bean>
</beans>

HomeController.java:
package org.kjsim;


import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;


@Controller
public class HomeController {


   @GetMapping("/")
   public String home(Model model) {
       model.addAttribute("message", "Welcome to Spring MVC!");
       return "home";
   }
}

home.jsp:
<%@ page contentType="text/html;charset=UTF-8" %>
<html>
<head>
 <title>Spring MVC Home</title>
</head>
<body>
<h2>${message}</h2>
</body>
</html>
